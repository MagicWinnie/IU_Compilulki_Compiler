<Program> ::= <ProgramInvocation> | <ClassDeclarations>

<ProgramInvocation> ::= "Program:" IDENTIFIER "(" <Arguments> ")"

<Arguments> ::= <Expression> | <Expression> "," <Arguments> | Îµ

<ClassDeclarations> ::= <ClassDeclaration> | <ClassDeclaration> <ClassDeclarations>

<ClassDeclaration> ::= "CLASS" <Type> "IS" <ClassBody> "END"
                     | "CLASS" <Type> "EXTENDS" <Type> "IS" <ClassBody> "END"

<ClassBody> ::= '' | <MemberDeclarations>

<MemberDeclarations> ::= <MemberDeclaration> | <MemberDeclarations> <MemberDeclaration>

<MemberDeclaration> ::= <Variable> | <Method> | <Constructor>

<Variable> ::= "VAR" IDENTIFIER ":" <Expression>

<Constructor> ::= "THIS" "(" <ArgumentDeclarations> ")" "IS" <Statements> "END"

<Method> ::= "METHOD" IDENTIFIER "(" <ArgumentDeclarations> ")" ":" <Type> "IS" <Statements> "END"

<ArgumentDeclarations> ::= ''
                         | <ArgumentDeclaration>
                         | <ArgumentDeclarations> "," <ArgumentDeclaration>

<ArgumentDeclaration> ::= IDENTIFIER ":" <Type>

<Statements> ::= '' | <Statement> | <Statements> <Statement>

<Statement> ::= <Variable> | <Assignment> | <IfStatement> | <WhileStatement> | <ReturnStatement> | <Expression> | "BREAK"

<Assignment> ::= IDENTIFIER ":=" <Expression>

<IfStatement> ::= "IF" <Relation> "THEN" <Statements> "END"
                | "IF" <Relation> "THEN" <Statements> "ELSE" <Statements> "END"

<WhileStatement> ::= "WHILE" <Relation> "LOOP" <Statements> "END"

<ReturnStatement> ::= "RETURN" | "RETURN" <Expression>

<Expression> ::= INTEGERLITERAL | REALLITERAL | BOOLLITERAL | "THIS" | IDENTIFIER | <MethodCall> | <CompoundExpression>

<CompoundExpression> ::= <Expression> "." <MethodCall>

<Relation> ::= <Expression>

<MethodCall> ::= <Type> "(" <Expressions> ")"

<Expressions> ::= '' | <Expression> | <Expressions> "," <Expression>

<Type> ::= IDENTIFIER | IDENTIFIER "[" <Types> "]"

<Types> ::= <Type> | <Types> "," <Type>
